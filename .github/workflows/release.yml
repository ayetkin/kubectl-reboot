name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: golang:1.24
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run all checks (vet, fmt, test)
      run: make check
      env:
        GOFLAGS: "-buildvcs=false"

  build:
    needs: test
    runs-on: ubuntu-latest
    container:
      image: golang:1.24
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      release-notes: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Make the extraction script executable
        chmod +x ./scripts/extract-changelog.sh
        
        # Extract changelog for this version
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        ./scripts/extract-changelog.sh ${{ steps.version.outputs.VERSION }} >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Build release binaries
      run: make package
    
    - name: Install envsubst
      run: |
        apt-get update && apt-get install -y gettext-base
    
    - name: Generate checksums and update manifest
      run: |
        cd dist
        # Generate checksums
        for file in *.tar.gz *.zip; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
        cd ..
        
        # Set up template variables
        export VERSION="${{ steps.version.outputs.VERSION }}"
        export CHECKSUM_LINUX_AMD64=$(grep "kubectl-reboot-linux-amd64.tar.gz" dist/checksums.txt | cut -d' ' -f1)
        export CHECKSUM_LINUX_ARM64=$(grep "kubectl-reboot-linux-arm64.tar.gz" dist/checksums.txt | cut -d' ' -f1)
        export CHECKSUM_DARWIN_AMD64=$(grep "kubectl-reboot-darwin-amd64.tar.gz" dist/checksums.txt | cut -d' ' -f1)
        export CHECKSUM_DARWIN_ARM64=$(grep "kubectl-reboot-darwin-arm64.tar.gz" dist/checksums.txt | cut -d' ' -f1)
        
        # Generate final manifest using envsubst
        envsubst < kubectl-reboot.yaml > kubectl-reboot.yaml.updated
        
        echo "‚úÖ Updated manifest with:"
        echo "   Version: $VERSION"
        echo "   Linux AMD64: $CHECKSUM_LINUX_AMD64"
        echo "   Linux ARM64: $CHECKSUM_LINUX_ARM64"
        echo "   Darwin AMD64: $CHECKSUM_DARWIN_AMD64"
        echo "   Darwin ARM64: $CHECKSUM_DARWIN_ARM64"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          dist/*
          kubectl-reboot.yaml.updated
        retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: ./artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: Release ${{ needs.build.outputs.version }}
        body: |
          ## Changes
          ${{ needs.build.outputs.release-notes }}
          
          ## Installation
          
          ### Via Krew (Recommended)
          ```bash
          kubectl krew install reboot
          ```
          
          ### Manual Installation
          Download the appropriate binary for your platform from the assets below.
          
          ## Checksums
          See `checksums.txt` for SHA256 checksums of all artifacts.
        files: |
          artifacts/dist/*
          artifacts/kubectl-reboot.yaml.updated
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Krew manifest instructions
      run: |
        echo "üéâ Release created successfully!"
        echo ""
        echo "üìã Krew manifest has been automatically updated with:"
        echo "   - Version: ${{ needs.build.outputs.version }}"
        echo "   - All platform checksums"
        echo ""
        echo "üìÅ Updated manifest available in release assets as: kubectl-reboot.yaml.updated"
        echo "   Ready for Krew submission!"
